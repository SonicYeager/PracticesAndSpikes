type Query {
  vehicles(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: VehicleFilterInput
    order: [VehicleSortInput!]
  ): VehiclesConnection
  garages(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: GarageFilterInput
    order: [GarageSortInput!]
  ): GaragesConnection
  fuelStops(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: FuelStopFilterInput
    order: [FuelStopSortInput!]
  ): FuelStopsConnection
}

type Mutation {
  createGarage(input: CreateGarageInput!): CreateGaragePayload
  addVehicle(input: AddVehicleInput!): AddVehiclePayload
  addFuelStop(input: AddFuelStopInput!): AddFuelStopPayload
}

type VehicleNotFoundError implements DefaultError {
  message: String!
}

type VehicleAlreadyExistsError implements DefaultError {
  message: String!
}

type GarageNotFoundError implements DefaultError {
  message: String!
}

type GarageAlreadyExistsError implements DefaultError {
  message: String!
}

interface DefaultError {
  message: String!
}

union ICreateGarageError = GarageAlreadyExistsError

union IAddVehicleError = VehicleAlreadyExistsError | GarageNotFoundError

union IAddFuelStopError = VehicleNotFoundError

input VehicleFilterInput {
  and: [VehicleFilterInput!]
  or: [VehicleFilterInput!]
  id: IntOperationFilterInput
  designation: StringOperationFilterInput
  licensePlate: StringOperationFilterInput
  firstRegistration: DateTimeOperationFilterInput
  odometer: DecimalOperationFilterInput
  priceAtPurchase: DecimalOperationFilterInput
  fuelCapacity: DecimalOperationFilterInput
  fuelStops: ListFilterInputTypeOfFuelStopFilterInput
}

input VehicleSortInput {
  id: SortEnumType
  designation: SortEnumType
  licensePlate: SortEnumType
  firstRegistration: SortEnumType
  odometer: SortEnumType
  priceAtPurchase: SortEnumType
  fuelCapacity: SortEnumType
}

"""
A connection to a list of items.
"""
type VehiclesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [VehiclesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Vehicle!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

input GarageFilterInput {
  and: [GarageFilterInput!]
  or: [GarageFilterInput!]
  id: IntOperationFilterInput
  designation: StringOperationFilterInput
  vehicles: ListFilterInputTypeOfVehicleFilterInput
}

input GarageSortInput {
  id: SortEnumType
  designation: SortEnumType
}

"""
A connection to a list of items.
"""
type GaragesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [GaragesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Garage!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

input FuelStopFilterInput {
  and: [FuelStopFilterInput!]
  or: [FuelStopFilterInput!]
  id: IntOperationFilterInput
  vehicleId: IntOperationFilterInput
  amountInLiters: DecimalOperationFilterInput
  totalPriceInEuro: DecimalOperationFilterInput
  odometerInKilometers: DecimalOperationFilterInput
  date: DateTimeOperationFilterInput
  note: StringOperationFilterInput
}

input FuelStopSortInput {
  id: SortEnumType
  vehicleId: SortEnumType
  amountInLiters: SortEnumType
  totalPriceInEuro: SortEnumType
  odometerInKilometers: SortEnumType
  date: SortEnumType
  note: SortEnumType
}

"""
A connection to a list of items.
"""
type FuelStopsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [FuelStopsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [FuelStop!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ListFilterInputTypeOfFuelStopFilterInput {
  all: FuelStopFilterInput
  none: FuelStopFilterInput
  some: FuelStopFilterInput
  any: Boolean
}

enum SortEnumType {
  ASC
  DESC
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Vehicle {
  id: Int!
  designation: String!
  licensePlate: String
  firstRegistration: DateTime!
  odometer: Decimal!
  priceAtPurchase: Decimal!
  fuelCapacity: Decimal!
  fuelStops: [FuelStop!]!
}

"""
An edge in a connection.
"""
type VehiclesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Vehicle!
}

input ListFilterInputTypeOfVehicleFilterInput {
  all: VehicleFilterInput
  none: VehicleFilterInput
  some: VehicleFilterInput
  any: Boolean
}

type Garage {
  id: Int!
  designation: String!
  vehicles: [Vehicle!]!
}

"""
An edge in a connection.
"""
type GaragesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Garage!
}

type FuelStop {
  id: Int!
  vehicleId: Int!
  amountInLiters: Decimal!
  totalPriceInEuro: Decimal!
  odometerInKilometers: Decimal!
  date: DateTime!
  note: String
}

"""
An edge in a connection.
"""
type FuelStopsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FuelStop!
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime

"""
The built-in `Decimal` scalar type.
"""
scalar Decimal

input AddFuelStopInput {
  vehicleId: Int!
  amountInLiters: Decimal!
  totalPriceInEuro: Decimal!
  odometerInKilometers: Decimal!
  date: DateTime!
  note: String
}

type AddFuelStopPayload {
  fuelStop: FuelStop
  errors: [IAddFuelStopError!]!
}

input AddVehicleInput {
  garageId: Int!
  designation: String!
  licensePlate: String
  firstRegistration: DateTime!
  odometer: Decimal!
  priceAtPurchase: Decimal!
  fuelCapacity: Decimal!
}

type AddVehiclePayload {
  vehicle: Vehicle
  errors: [IAddVehicleError!]!
}

input CreateGarageInput {
  designation: String!
}

type CreateGaragePayload {
  garage: Garage
  errors: [ICreateGarageError!]!
}
