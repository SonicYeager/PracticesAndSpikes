type Query {
  garages(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: GarageFilterInput
    order: [GarageSortInput!]
  ): GaragesConnection
}

type Mutation {
  createGarage(input: CreateGarageInput!): CreateGaragePayload
}

union ICreateGarageError = GarageAlreadyExistsError

type GarageAlreadyExistsError {
  message: String!
}

input GarageFilterInput {
  and: [GarageFilterInput!]
  or: [GarageFilterInput!]
  id: IntOperationFilterInput
  designation: StringOperationFilterInput
}

input GarageSortInput {
  id: SortEnumType
  designation: SortEnumType
}

"""
A connection to a list of items.
"""
type GaragesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [GaragesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Garage!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Garage {
  id: Int!
  designation: String!
}

"""
An edge in a connection.
"""
type GaragesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Garage!
}

input CreateGarageInput {
  designation: String!
}

type CreateGaragePayload {
  garage: Garage
  errors: [ICreateGarageError!]!
}