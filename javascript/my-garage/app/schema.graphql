input CreateGarageInput {
  designation: String!
}

type CreateGaragePayload {
  errors: [ICreateGarageError!]!
  garage: Garage
}

input CreateVehicleInput {
  designation: String!
  firstRegistration: DateTime!
  fuelCapacity: Decimal!
  garageId: Int!
  licensePlate: String
  odometer: Decimal!
  priceAtPurchase: Decimal!
}

type CreateVehiclePayload {
  errors: [ICreateVehicleError!]!
  vehicle: Vehicle
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

input DateTimeOperationFilterInput {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  neq: DateTime
  ngt: DateTime
  ngte: DateTime
  nin: [DateTime]
  nlt: DateTime
  nlte: DateTime
}

"""The built-in `Decimal` scalar type."""
scalar Decimal

input DecimalOperationFilterInput {
  eq: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  neq: Decimal
  ngt: Decimal
  ngte: Decimal
  nin: [Decimal]
  nlt: Decimal
  nlte: Decimal
}

interface DefaultError {
  message: String!
}

type Garage {
  designation: String!
  id: Int!
  vehicles: [Vehicle!]!
}

type GarageAlreadyExistsError implements DefaultError {
  message: String!
}

input GarageFilterInput {
  and: [GarageFilterInput!]
  designation: StringOperationFilterInput
  id: IntOperationFilterInput
  or: [GarageFilterInput!]
  vehicles: ListFilterInputTypeOfVehicleFilterInput
}

type GarageNotFoundError implements DefaultError {
  message: String!
}

input GarageSortInput {
  designation: SortEnumType
  id: SortEnumType
}

"""A connection to a list of items."""
type GaragesConnection {
  """A list of edges."""
  edges: [GaragesEdge!]

  """A flattened list of the nodes."""
  nodes: [Garage!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GaragesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Garage!
}

union ICreateGarageError = GarageAlreadyExistsError

union ICreateVehicleError = GarageNotFoundError | VehicleAlreadyExistsError

input IntOperationFilterInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  neq: Int
  ngt: Int
  ngte: Int
  nin: [Int]
  nlt: Int
  nlte: Int
}

input ListFilterInputTypeOfVehicleFilterInput {
  all: VehicleFilterInput
  any: Boolean
  none: VehicleFilterInput
  some: VehicleFilterInput
}

type Mutation {
  createGarage(input: CreateGarageInput!): CreateGaragePayload
  createVehicle(input: CreateVehicleInput!): CreateVehiclePayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  garages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [GarageSortInput!]
    where: GarageFilterInput
  ): GaragesConnection
  vehicles(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    order: [VehicleSortInput!]
    where: VehicleFilterInput
  ): VehiclesConnection
}

enum SortEnumType {
  ASC
  DESC
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  contains: String
  endsWith: String
  eq: String
  in: [String]
  ncontains: String
  nendsWith: String
  neq: String
  nin: [String]
  nstartsWith: String
  or: [StringOperationFilterInput!]
  startsWith: String
}

type Vehicle {
  designation: String!
  firstRegistration: DateTime!
  fuelCapacity: Decimal!
  id: Int!
  licensePlate: String
  odometer: Decimal!
  priceAtPurchase: Decimal!
}

type VehicleAlreadyExistsError implements DefaultError {
  message: String!
}

input VehicleFilterInput {
  and: [VehicleFilterInput!]
  designation: StringOperationFilterInput
  firstRegistration: DateTimeOperationFilterInput
  fuelCapacity: DecimalOperationFilterInput
  id: IntOperationFilterInput
  licensePlate: StringOperationFilterInput
  odometer: DecimalOperationFilterInput
  or: [VehicleFilterInput!]
  priceAtPurchase: DecimalOperationFilterInput
}

input VehicleSortInput {
  designation: SortEnumType
  firstRegistration: SortEnumType
  fuelCapacity: SortEnumType
  id: SortEnumType
  licensePlate: SortEnumType
  odometer: SortEnumType
  priceAtPurchase: SortEnumType
}

"""A connection to a list of items."""
type VehiclesConnection {
  """A list of edges."""
  edges: [VehiclesEdge!]

  """A flattened list of the nodes."""
  nodes: [Vehicle!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type VehiclesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Vehicle!
}
